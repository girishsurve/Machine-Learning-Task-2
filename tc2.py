# -*- coding: utf-8 -*-
"""TC2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ke6ZLNjxgmxYUpQ2ja7uS7o-Ug1kbIOv
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files

from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder

# STEP 2: Load Data (Assuming the data is in a CSV file named 'Mall_Customers.csv')
df = pd.read_csv('Mall_Customers.csv')
display(df.head())

#  Choose Features for Clustering
# We'll cluster based on 'Annual Income' and 'Spending Score'
X = df[['Annual Income (k$)', 'Spending Score (1-100)']]

# Find Optimal Number of Clusters using Elbow Method

inertia = []
k_range = range(1, 11)

for k in k_range:
    km = KMeans(n_clusters=k, random_state=42)
    km.fit(X)
    inertia.append(km.inertia_)

# Plot Elbow Graph
plt.figure(figsize=(8,4))
plt.plot(k_range, inertia, 'bo-')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Method to Determine Optimal k')
plt.show()

# Create a figure with 3 subplots
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

axs[0].scatter(df['CustomerID'], df['Age'], color='blue')
axs[0].set_title('CustomerID vs Age')
axs[0].set_xlabel('CustomerID')
axs[0].set_ylabel('Age')

axs[1].scatter(df['Age'], df['Annual Income (k$)'], color='blue')
axs[1].set_title('Age vs Annual Income')
axs[1].set_xlabel('Age')
axs[1].set_ylabel('Annual Income (k$)')

axs[2].scatter(df['Annual Income (k$)'], df['Spending Score (1-100)'], color='blue')
axs[2].set_title('Annual Income vs Spending Score')
axs[2].set_xlabel('Annual Income (k$)')
axs[2].set_ylabel('Spending Score (1-100)')


# Adjust layout for better visibility
plt.tight_layout()
plt.show()

# Create a figure with 2 subplots
fig, axs = plt.subplots(1, 2, figsize=(12, 5))

axs[0].plot(df['CustomerID'], df['Age'], color='blue')
axs[0].set_title('CustomerID vs Age')
axs[0].set_xlabel('CustomerID')
axs[0].set_ylabel('Age')

axs[1].plot(df['CustomerID'], df['Spending Score (1-100)'], color='blue')
axs[1].set_title('CustomerID vs Spending Score (1-100)')
axs[1].set_xlabel('CustomerID')
axs[1].set_ylabel('Spending Score (1-100)')

# Adjust layout for better visibility
plt.tight_layout()
plt.show()

fig, axs = plt.subplots(2, 2, figsize=(12, 10))

sns.stripplot(x='Gender', y='CustomerID', data=df, ax=axs[0, 0], jitter=True)
axs[0, 0].set_title('Gender vs CustomerID')

sns.stripplot(x='Gender', y='Age', data=df, ax=axs[0, 1], jitter=True)
axs[0, 1].set_title('Gender vs Age')

sns.stripplot(x='Gender', y='Spending Score (1-100)', data=df, ax=axs[1, 0], jitter=True)
axs[1, 0].set_title('Gender vs Spending Score (1-100)')

sns.stripplot(x='Gender', y='Annual Income (k$)', data=df, ax=axs[1, 1], jitter=True)
axs[1, 1].set_title('Gender vs Annual Income (k$)')

plt.tight_layout()
plt.show()

#1
# Gender Distribution (Bar Plot)
df['Gender'].value_counts().plot(kind='bar', color=['skyblue', 'salmon'])
plt.title('Gender Distribution')
plt.xlabel('Gender (0 = Female, 1 = Male)')
plt.ylabel('Count')
plt.show()

#2
# Age Distribution (Histogram)
plt.hist(df['Age'], bins=15, color='mediumseagreen', edgecolor='black')
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

#3
# Annual Income Distribution (Histogram)
plt.hist(df['Annual Income (k$)'], bins=15, color='cornflowerblue', edgecolor='black')
plt.title('Annual Income Distribution')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Frequency')
plt.show()

#4
#Spending Score Distribution (Histogram)
plt.hist(df['Spending Score (1-100)'], bins=15, color='orange', edgecolor='black')
plt.title('Spending Score Distribution')
plt.xlabel('Spending Score (1-100)')
plt.ylabel('Frequency')
plt.show()

#5
#. Gender vs Age (Scatter Plot)
plt.scatter(df['Gender'], df['Age'], alpha=0.6)
plt.title('Gender vs Age')
plt.xlabel('Gender (0 = Female, 1 = Male)')
plt.ylabel('Age')
plt.show()

#6
#Age vs Annual Income (Scatter Plot)
plt.scatter(df['Age'], df['Annual Income (k$)'], alpha=0.7)
plt.title('Age vs Annual Income')
plt.xlabel('Age')
plt.ylabel('Annual Income (k$)')
plt.show()

#7
#Age vs Annual Income (Scatter Plot)
plt.scatter(df['Age'], df['Annual Income (k$)'], alpha=0.7)
plt.title('Age vs Annual Income')
plt.xlabel('Age')
plt.ylabel('Annual Income (k$)')
plt.show()


#8
# Annual Income vs Gender (Line Plot)
plt.plot(df['Annual Income (k$)'], df['Gender'], linestyle='-', marker='', alpha=0.6)
plt.title('Annual Income vs Gender')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Gender (0 = Female, 1 = Male)')
plt.show()

#9
# Annual Income vs Gender (Line Plot)
plt.plot(df['Annual Income (k$)'], df['Gender'], linestyle='-', marker='', alpha=0.6)
plt.title('Annual Income vs Gender')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Gender (0 = Female, 1 = Male)')
plt.show()

#10
# Annual Income vs Gender (Line Plot)
plt.plot(df['Annual Income (k$)'], df['Gender'], linestyle='-', marker='', alpha=0.6)
plt.title('Annual Income vs Gender')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Gender (0 = Female, 1 = Male)')
plt.show()

#11
# Annual Income vs Gender (Line Plot)
plt.plot(df['Annual Income (k$)'], df['Gender'], linestyle='-', marker='', alpha=0.6)
plt.title('Annual Income vs Gender')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Gender (0 = Female, 1 = Male)')
plt.show()

#12
# Age vs Customer Index (Line Plot)
plt.plot(df['Age'])
plt.title('Age by Customer Index')
plt.ylabel('Age')
plt.xlabel('Customer Index')
plt.show()

#13
# Gender vs Customer Index (Line Plot)
plt.plot(df['Gender'])
plt.title('Gender by Customer Index')
plt.ylabel('Gender (0 = Female, 1 = Male)')
plt.xlabel('Customer Index')
plt.show()

# Perform K-Means clustering with the optimal number of clusters (assuming 5 based on the elbow plot)
optimal_k = 5
km = KMeans(n_clusters=optimal_k, random_state=42)
df['Cluster'] = km.fit_predict(X)

#1
# Visualize Clusters
plt.figure(figsize=(8,6))
sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)', hue='Cluster', palette='Set1', s=100)
plt.title('Customer Segments by K-Means Clustering')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()

# Create a figure with 4 subplots
fig, axs = plt.subplots(2, 2, figsize=(10, 8))

axs[0, 0].scatter(df['CustomerID'], df['Age'], color='blue')
axs[0, 0].set_title('CustomerID vs Age')
axs[0, 0].set_xlabel('CustomerID')
axs[0, 0].set_ylabel('Age')

axs[0, 1].scatter(df['Age'], df['Annual Income (k$)'], color='blue')
axs[0, 1].set_title('Age vs Annual Income')
axs[0, 1].set_xlabel('Age')
axs[0, 1].set_ylabel('Annual Income (k$)')

axs[1, 0].scatter(df['Annual Income (k$)'], df['Spending Score (1-100)'], color='blue')
axs[1, 0].set_title('Annual Income vs Spending Score')
axs[1, 0].set_xlabel('Annual Income (k$)')
axs[1, 0].set_ylabel('Spending Score (1-100)')


axs[1, 1].scatter(df['Spending Score (1-100)'],
                  df['Cluster'], color='blue')
axs[1, 1].set_title('Spending Score vs Cluster')
axs[1, 1].set_xlabel('Spending Score (1-100)')
axs[1, 1].set_ylabel('Cluster')

# Adjust layout for better visibility
plt.tight_layout()
plt.show()


#2
# Age Distribution (Histogram)
plt.hist(df['Age'], bins=15, color='mediumseagreen', edgecolor='black')
plt.title('Distribution of Customer Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

